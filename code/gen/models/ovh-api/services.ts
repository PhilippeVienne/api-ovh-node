import {Schema} from '../../src/schema';

export const schema: Schema = {
  "apiVersion": "1",
  "apis": [
    {
      "path": "/services",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "httpMethod": "GET",
          "parameters": [
            {
              "name": "routes",
              "dataType": "string",
              "paramType": "query",
              "fullType": "string",
              "required": false,
              "description": "Filter services by API route path (comma separated)"
            },
            {
              "name": "orderBy",
              "dataType": "string",
              "paramType": "query",
              "fullType": "string",
              "required": false,
              "description": "Order services by services.expanded.Service properties"
            },
            {
              "name": "sort",
              "dataType": "string",
              "paramType": "query",
              "fullType": "string",
              "required": false,
              "description": "Sort results generated by 'orderBy'"
            }
          ],
          "responseType": "long[]",
          "noAuthentication": false,
          "description": "List available services"
        }
      ],
      "description": "Get list of your service details"
    },
    {
      "path": "/services/{serviceId}",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "httpMethod": "GET",
          "parameters": [
            {
              "name": "serviceId",
              "dataType": "long",
              "paramType": "path",
              "fullType": "long",
              "required": true,
              "description": "Service ID"
            }
          ],
          "responseType": "services.expanded.Service",
          "noAuthentication": false,
          "description": "Get details about a service"
        }
      ],
      "description": "Get list of your service details"
    },
    {
      "path": "/services/{serviceId}/billing/engagement",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "httpMethod": "GET",
          "parameters": [
            {
              "name": "serviceId",
              "dataType": "long",
              "paramType": "path",
              "fullType": "long",
              "required": true,
              "description": "Service ID"
            }
          ],
          "responseType": "services.billing.engagement.Engagement",
          "noAuthentication": false,
          "description": "Get engagement details"
        }
      ],
      "description": "Engagement for a given service"
    },
    {
      "path": "/services/{serviceId}/detach",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "httpMethod": "GET",
          "parameters": [
            {
              "name": "serviceId",
              "dataType": "long",
              "paramType": "path",
              "fullType": "long",
              "required": true,
              "description": "Service ID"
            }
          ],
          "responseType": "order.cart.GenericProductDefinition[]",
          "noAuthentication": false,
          "description": "List offers this option can be converted to"
        }
      ],
      "description": "Detach your option offer to a standalone offer"
    },
    {
      "path": "/services/{serviceId}/detach/{planCode}",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "httpMethod": "GET",
          "parameters": [
            {
              "name": "planCode",
              "dataType": "string",
              "paramType": "path",
              "fullType": "string",
              "required": true,
              "description": "Plan code"
            },
            {
              "name": "serviceId",
              "dataType": "long",
              "paramType": "path",
              "fullType": "long",
              "required": true,
              "description": "Service ID"
            }
          ],
          "responseType": "order.cart.GenericProductDefinition",
          "noAuthentication": false,
          "description": "View an offer this option can be converted to"
        }
      ],
      "description": "Detach your option offer to a standalone offer"
    },
    {
      "path": "/services/{serviceId}/detach/{planCode}/execute",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "httpMethod": "POST",
          "parameters": [
            {
              "dataType": "services.operation.ExecutionRequest",
              "paramType": "body",
              "fullType": "services.operation.ExecutionRequest",
              "required": true,
              "description": "Request Body"
            },
            {
              "name": "planCode",
              "dataType": "string",
              "paramType": "path",
              "fullType": "string",
              "required": true,
              "description": "Plan code"
            },
            {
              "name": "serviceId",
              "dataType": "long",
              "paramType": "path",
              "fullType": "long",
              "required": true,
              "description": "Service ID"
            }
          ],
          "responseType": "services.operation.Order",
          "noAuthentication": false,
          "description": "Perform the migration to a standalone offer. May require you to pay an Order"
        }
      ],
      "description": "Detach your option offer to a standalone offer"
    },
    {
      "path": "/services/{serviceId}/detach/{planCode}/simulate",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "httpMethod": "POST",
          "parameters": [
            {
              "dataType": "services.operation.ExecutionRequest",
              "paramType": "body",
              "fullType": "services.operation.ExecutionRequest",
              "required": true,
              "description": "Request Body"
            },
            {
              "name": "serviceId",
              "dataType": "long",
              "paramType": "path",
              "fullType": "long",
              "required": true,
              "description": "Service ID"
            },
            {
              "name": "planCode",
              "dataType": "string",
              "paramType": "path",
              "fullType": "string",
              "required": true,
              "description": "Plan code"
            }
          ],
          "responseType": "services.operation.Order",
          "noAuthentication": false,
          "description": "Simulate the migration to a standalone offer. It won't generate any Order or issue any changes to your Service"
        }
      ],
      "description": "Detach your option offer to a standalone offer"
    },
    {
      "path": "/services/{serviceId}/form",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "httpMethod": "GET",
          "parameters": [
            {
              "name": "serviceId",
              "dataType": "long",
              "paramType": "path",
              "fullType": "long",
              "required": true,
              "description": "Service ID"
            }
          ],
          "responseType": "services.form.Description[]",
          "noAuthentication": false,
          "description": "List available forms for service"
        }
      ],
      "description": "Manage the forms for your services"
    },
    {
      "path": "/services/{serviceId}/form/{formName}",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "httpMethod": "GET",
          "parameters": [
            {
              "name": "serviceId",
              "dataType": "long",
              "paramType": "path",
              "fullType": "long",
              "required": true,
              "description": "Service ID"
            },
            {
              "name": "formName",
              "dataType": "string",
              "paramType": "path",
              "fullType": "string",
              "required": true,
              "description": "Form name"
            }
          ],
          "responseType": "services.form.Description",
          "noAuthentication": false,
          "description": "Get specified form description for service"
        }
      ],
      "description": "Manage the forms for your services"
    },
    {
      "path": "/services/{serviceId}/form/{formName}/answer",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "httpMethod": "POST",
          "parameters": [
            {
              "dataType": "services.form.Form",
              "paramType": "body",
              "fullType": "services.form.Form",
              "required": true,
              "description": "Request Body"
            },
            {
              "name": "formName",
              "dataType": "string",
              "paramType": "path",
              "fullType": "string",
              "required": true,
              "description": "Form name"
            },
            {
              "name": "serviceId",
              "dataType": "long",
              "paramType": "path",
              "fullType": "long",
              "required": true,
              "description": "Service ID"
            }
          ],
          "responseType": "services.form.Response",
          "noAuthentication": false,
          "description": "Post answers to the form for your service"
        }
      ],
      "description": "Answers to a form for your service"
    },
    {
      "path": "/services/{serviceId}/options",
      "operations": [
        {
          "apiStatus": {
            "description": "Beta version",
            "value": "BETA"
          },
          "httpMethod": "GET",
          "parameters": [
            {
              "name": "serviceId",
              "dataType": "long",
              "paramType": "path",
              "fullType": "long",
              "required": true,
              "description": "Service ID"
            }
          ],
          "responseType": "services.expanded.Service[]",
          "noAuthentication": false,
          "description": "Get options of a service"
        }
      ],
      "description": "Get options of your service"
    }
  ],
  "resourcePath": "/services",
  "basePath": "https://eu.api.ovh.com/1.0",
  "models": {
    "complexType.SafeKeyValue<T>": {
      "id": "SafeKeyValue",
      "namespace": "complexType",
      "description": "Key and value, with proper key strings",
      "generics": [
        "T"
      ],
      "properties": {
        "key": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "required": false
        },
        "value": {
          "type": "T",
          "fullType": "T",
          "canBeNull": false,
          "readOnly": true,
          "required": false
        }
      }
    },
    "order.Contract": {
      "id": "Contract",
      "namespace": "order",
      "description": "A contract",
      "properties": {
        "content": {
          "type": "text",
          "fullType": "text",
          "canBeNull": false,
          "readOnly": true,
          "description": "Terms of the contract",
          "required": false
        },
        "name": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Name of the contract",
          "required": false
        },
        "url": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "URL to download the contract",
          "required": false
        }
      }
    },
    "order.CurrencyCodeEnum": {
      "id": "CurrencyCodeEnum",
      "namespace": "order",
      "description": "Currency code",
      "enum": [
        "AUD",
        "CAD",
        "CZK",
        "EUR",
        "GBP",
        "LTL",
        "MAD",
        "N/A",
        "PLN",
        "SGD",
        "TND",
        "USD",
        "XOF",
        "points"
      ],
      "enumType": "string"
    },
    "order.Order": {
      "id": "Order",
      "namespace": "order",
      "description": "An order",
      "properties": {
        "contracts": {
          "type": "order.Contract[]",
          "fullType": "order.Contract[]",
          "canBeNull": false,
          "readOnly": true,
          "description": "List of contracts related to the order",
          "required": false
        },
        "details": {
          "type": "order.OrderDetail[]",
          "fullType": "order.OrderDetail[]",
          "canBeNull": false,
          "readOnly": true,
          "description": "Details of the order",
          "required": false
        },
        "orderId": {
          "type": "long",
          "fullType": "long",
          "canBeNull": true,
          "readOnly": true,
          "description": "Identifier of the order",
          "required": false
        },
        "prices": {
          "type": "order.OrderPrices",
          "fullType": "order.OrderPrices",
          "canBeNull": false,
          "readOnly": true,
          "description": "Prices of the order including with and without taxes",
          "required": false
        },
        "url": {
          "type": "string",
          "fullType": "string",
          "canBeNull": true,
          "readOnly": true,
          "description": "URL to download the order",
          "required": false
        }
      }
    },
    "order.OrderDetail": {
      "id": "OrderDetail",
      "namespace": "order",
      "description": "Detail of an order",
      "properties": {
        "cartItemID": {
          "type": "long",
          "fullType": "long",
          "canBeNull": true,
          "readOnly": true,
          "description": "Cart Item ID the details is related to",
          "required": false
        },
        "description": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Description of the detail",
          "required": false
        },
        "detailType": {
          "type": "order.OrderDetailTypeEnum",
          "fullType": "order.OrderDetailTypeEnum",
          "canBeNull": true,
          "readOnly": true,
          "description": "Type of detail",
          "required": false
        },
        "domain": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Service name",
          "required": false
        },
        "originalTotalPrice": {
          "type": "order.Price",
          "fullType": "order.Price",
          "canBeNull": false,
          "readOnly": true,
          "description": "Original price of the detail before reduction application",
          "required": false
        },
        "quantity": {
          "type": "long",
          "fullType": "long",
          "canBeNull": false,
          "readOnly": true,
          "description": "Quantity of the service",
          "required": false
        },
        "reductionTotalPrice": {
          "type": "order.Price",
          "fullType": "order.Price",
          "canBeNull": false,
          "readOnly": true,
          "description": "Total price of the reduction",
          "required": false
        },
        "reductions": {
          "type": "order.Reduction[]",
          "fullType": "order.Reduction[]",
          "canBeNull": false,
          "readOnly": true,
          "description": "List of reductions applied to the detail",
          "required": false
        },
        "totalPrice": {
          "type": "order.Price",
          "fullType": "order.Price",
          "canBeNull": false,
          "readOnly": true,
          "description": "Price total of the services",
          "required": false
        },
        "unitPrice": {
          "type": "order.Price",
          "fullType": "order.Price",
          "canBeNull": false,
          "readOnly": true,
          "description": "Unitary price of the service",
          "required": false
        }
      }
    },
    "order.OrderDetailTypeEnum": {
      "id": "OrderDetailTypeEnum",
      "namespace": "order",
      "description": "Product type of item in order",
      "enum": [
        "ACCESSORY",
        "CAUTION",
        "CHOOSED",
        "CONSUMPTION",
        "CREATION",
        "DELIVERY",
        "DURATION",
        "GIFT",
        "INSTALLATION",
        "LICENSE",
        "MUTE",
        "OTHER",
        "OUTPLAN",
        "QUANTITY",
        "REFUND",
        "RENEW",
        "SPECIAL",
        "SWITCH",
        "TRANSFER",
        "VOUCHER"
      ],
      "enumType": "string"
    },
    "order.OrderPrices": {
      "id": "OrderPrices",
      "namespace": "order",
      "description": "Prices of an order",
      "properties": {
        "originalWithoutTax": {
          "type": "order.Price",
          "fullType": "order.Price",
          "canBeNull": true,
          "readOnly": true,
          "description": "Price before reduction application",
          "required": false
        },
        "reduction": {
          "type": "order.Price",
          "fullType": "order.Price",
          "canBeNull": true,
          "readOnly": true,
          "description": "Price concerning the reduced amount",
          "required": false
        },
        "tax": {
          "type": "order.Price",
          "fullType": "order.Price",
          "canBeNull": false,
          "readOnly": true,
          "description": "Tax amount",
          "required": false
        },
        "withTax": {
          "type": "order.Price",
          "fullType": "order.Price",
          "canBeNull": false,
          "readOnly": true,
          "description": "Price with tax",
          "required": false
        },
        "withoutTax": {
          "type": "order.Price",
          "fullType": "order.Price",
          "canBeNull": false,
          "readOnly": true,
          "description": "Price without tax",
          "required": false
        }
      }
    },
    "order.Price": {
      "id": "Price",
      "namespace": "order",
      "description": "Price with its currency and textual representation",
      "properties": {
        "currencyCode": {
          "type": "order.CurrencyCodeEnum",
          "fullType": "order.CurrencyCodeEnum",
          "canBeNull": false,
          "readOnly": true,
          "description": "Currency code",
          "required": false
        },
        "text": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Textual representation",
          "required": false
        },
        "value": {
          "type": "double",
          "fullType": "double",
          "canBeNull": false,
          "readOnly": true,
          "description": "The effective price",
          "required": false
        }
      }
    },
    "order.Reduction": {
      "id": "Reduction",
      "namespace": "order",
      "description": "Order detail reduction",
      "properties": {
        "context": {
          "type": "order.ReductionContextEnum",
          "fullType": "order.ReductionContextEnum",
          "canBeNull": false,
          "readOnly": true,
          "description": "In which context the reduction is applied",
          "required": false
        },
        "price": {
          "type": "order.Price",
          "fullType": "order.Price",
          "canBeNull": false,
          "readOnly": true,
          "description": "Reduction price applied with this promotion",
          "required": false
        },
        "type": {
          "type": "order.ReductionTypeEnum",
          "fullType": "order.ReductionTypeEnum",
          "canBeNull": false,
          "readOnly": true,
          "description": "Reduction effect, price modification",
          "required": false
        },
        "value": {
          "type": "order.Price",
          "fullType": "order.Price",
          "canBeNull": false,
          "readOnly": true,
          "description": "The reduction value",
          "required": false
        }
      }
    },
    "order.ReductionContextEnum": {
      "id": "ReductionContextEnum",
      "namespace": "order",
      "description": "Context of the reduction",
      "enum": [
        "promotion",
        "voucher"
      ],
      "enumType": "string"
    },
    "order.ReductionTypeEnum": {
      "id": "ReductionTypeEnum",
      "namespace": "order",
      "description": "Type of reduction",
      "enum": [
        "percentage",
        "forced_amount",
        "fixed_amount"
      ],
      "enumType": "string"
    },
    "order.cart.GenericProductDefinition": {
      "id": "GenericProductDefinition",
      "namespace": "order.cart",
      "description": "Representation of a generic product",
      "properties": {
        "planCode": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Product offer identifier",
          "required": false
        },
        "prices": {
          "type": "order.cart.GenericProductPricing[]",
          "fullType": "order.cart.GenericProductPricing[]",
          "canBeNull": false,
          "readOnly": true,
          "description": "Prices of the product offer",
          "required": false
        },
        "productName": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Name of the product",
          "required": false
        },
        "productType": {
          "type": "order.cart.GenericProductTypeEnum",
          "fullType": "order.cart.GenericProductTypeEnum",
          "canBeNull": false,
          "readOnly": true,
          "description": "Product type",
          "required": false
        }
      }
    },
    "order.cart.GenericProductPricing": {
      "id": "GenericProductPricing",
      "namespace": "order.cart",
      "description": "Representation of a product pricing",
      "properties": {
        "capacities": {
          "type": "order.cart.GenericProductPricingCapacitiesEnum[]",
          "fullType": "order.cart.GenericProductPricingCapacitiesEnum[]",
          "canBeNull": false,
          "readOnly": true,
          "description": "Capacities of the pricing (type of pricing)",
          "required": false
        },
        "description": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Description of the pricing",
          "required": false
        },
        "duration": {
          "type": "duration",
          "fullType": "duration",
          "canBeNull": false,
          "readOnly": true,
          "description": "Duration for ordering the product",
          "required": false
        },
        "interval": {
          "type": "long",
          "fullType": "long",
          "canBeNull": false,
          "readOnly": true,
          "description": "Interval of renewal",
          "required": false
        },
        "maximumQuantity": {
          "type": "long",
          "fullType": "long",
          "canBeNull": false,
          "readOnly": true,
          "description": "Maximum quantity that can be ordered",
          "required": false
        },
        "maximumRepeat": {
          "type": "long",
          "fullType": "long",
          "canBeNull": true,
          "readOnly": true,
          "description": "Maximum repeat for renewal",
          "required": false
        },
        "minimumQuantity": {
          "type": "long",
          "fullType": "long",
          "canBeNull": false,
          "readOnly": true,
          "description": "Minimum quantity that can be ordered",
          "required": false
        },
        "minimumRepeat": {
          "type": "long",
          "fullType": "long",
          "canBeNull": false,
          "readOnly": true,
          "description": "Minimum repeat for renewal",
          "required": false
        },
        "price": {
          "type": "order.Price",
          "fullType": "order.Price",
          "canBeNull": false,
          "readOnly": true,
          "description": "Price of the product",
          "required": false
        },
        "priceInUcents": {
          "type": "long",
          "fullType": "long",
          "canBeNull": false,
          "readOnly": true,
          "description": "Price of the product in micro-centims",
          "required": false
        },
        "pricingMode": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Pricing model identifier",
          "required": false
        },
        "pricingType": {
          "type": "order.cart.GenericProductPricingTypeEnum",
          "fullType": "order.cart.GenericProductPricingTypeEnum",
          "canBeNull": false,
          "readOnly": true,
          "description": "Pricing type",
          "required": false
        }
      }
    },
    "order.cart.GenericProductPricingCapacitiesEnum": {
      "id": "GenericProductPricingCapacitiesEnum",
      "namespace": "order.cart",
      "description": "Capacity of a pricing (type)",
      "enum": [
        "installation",
        "renew",
        "upgrade",
        "downgrade",
        "detach"
      ],
      "enumType": "string"
    },
    "order.cart.GenericProductPricingTypeEnum": {
      "id": "GenericProductPricingTypeEnum",
      "namespace": "order.cart",
      "description": "Type of a pricing",
      "enum": [
        "rental",
        "consumption",
        "purchase"
      ],
      "enumType": "string"
    },
    "order.cart.GenericProductTypeEnum": {
      "id": "GenericProductTypeEnum",
      "namespace": "order.cart",
      "description": "Type of a product",
      "enum": [
        "delivery",
        "deposit",
        "shipping",
        "cloud_service",
        "saas_license",
        "storage",
        "domain"
      ],
      "enumType": "string"
    },
    "services.billing.engagement.EndRule": {
      "id": "EndRule",
      "namespace": "services.billing.engagement",
      "description": "Description of the rule applied at the end of the Engagement",
      "properties": {
        "possibleStrategies": {
          "type": "services.billing.engagement.EndStrategyEnum[]",
          "fullType": "services.billing.engagement.EndStrategyEnum[]",
          "canBeNull": false,
          "readOnly": true,
          "description": "Describes the possible strategies for this Engagement",
          "required": false
        },
        "strategy": {
          "type": "services.billing.engagement.EndStrategyEnum",
          "fullType": "services.billing.engagement.EndStrategyEnum",
          "canBeNull": false,
          "readOnly": true,
          "description": "Strategy applied at the end",
          "required": false
        }
      }
    },
    "services.billing.engagement.EndStrategyEnum": {
      "id": "EndStrategyEnum",
      "namespace": "services.billing.engagement",
      "description": "Strategy applicable at the end of the Engagement",
      "enum": [
        "STOP_ENGAGEMENT_FALLBACK_DEFAULT_PRICE",
        "REACTIVATE_ENGAGEMENT",
        "CANCEL_SERVICE",
        "STOP_ENGAGEMENT_KEEP_PRICE"
      ],
      "enumType": "string"
    },
    "services.billing.engagement.Engagement": {
      "id": "Engagement",
      "namespace": "services.billing.engagement",
      "description": "Description of an Engagement",
      "properties": {
        "currentPeriod": {
          "type": "services.billing.engagement.EngagementPeriod",
          "fullType": "services.billing.engagement.EngagementPeriod",
          "canBeNull": false,
          "readOnly": true,
          "description": "Current engagement period",
          "required": false
        },
        "endRule": {
          "type": "services.billing.engagement.EndRule",
          "fullType": "services.billing.engagement.EndRule",
          "canBeNull": true,
          "readOnly": true,
          "description": "Describes the rule applied at the end of the Engagement",
          "required": false
        }
      }
    },
    "services.billing.engagement.EngagementPeriod": {
      "id": "EngagementPeriod",
      "namespace": "services.billing.engagement",
      "description": "Period of Engagement",
      "properties": {
        "endDate": {
          "type": "date",
          "fullType": "date",
          "canBeNull": true,
          "readOnly": true,
          "description": "End of the period",
          "required": false
        },
        "startDate": {
          "type": "date",
          "fullType": "date",
          "canBeNull": false,
          "readOnly": true,
          "description": "Beginning of the period",
          "required": false
        }
      }
    },
    "services.expanded.Billing": {
      "id": "Billing",
      "namespace": "services.expanded",
      "description": "Billing informations of the service",
      "properties": {
        "expirationDate": {
          "type": "datetime",
          "fullType": "datetime",
          "canBeNull": true,
          "readOnly": true,
          "description": "Expiration date",
          "required": false
        },
        "nextBillingDate": {
          "type": "datetime",
          "fullType": "datetime",
          "canBeNull": true,
          "readOnly": true,
          "description": "Next billing date",
          "required": false
        },
        "plan": {
          "type": "services.expanded.Plan",
          "fullType": "services.expanded.Plan",
          "canBeNull": true,
          "readOnly": true,
          "description": "Service Plan",
          "required": false
        }
      }
    },
    "services.expanded.Plan": {
      "id": "Plan",
      "namespace": "services.expanded",
      "description": "Plan of the service",
      "properties": {
        "code": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Plan code",
          "required": false
        },
        "invoiceName": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Invoice Name",
          "required": false
        }
      }
    },
    "services.expanded.Product": {
      "id": "Product",
      "namespace": "services.expanded",
      "description": "Product of the service",
      "properties": {
        "description": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Product description",
          "required": false
        },
        "name": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Product name",
          "required": false
        }
      }
    },
    "services.expanded.Resource": {
      "id": "Resource",
      "namespace": "services.expanded",
      "description": "Resource of the service",
      "properties": {
        "displayName": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Display name of the resource",
          "required": false
        },
        "name": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Name of the resource",
          "required": false
        },
        "product": {
          "type": "services.expanded.Product",
          "fullType": "services.expanded.Product",
          "canBeNull": true,
          "readOnly": true,
          "description": "Product",
          "required": false
        }
      }
    },
    "services.expanded.Route": {
      "id": "Route",
      "namespace": "services.expanded",
      "description": "Route of the service",
      "properties": {
        "path": {
          "type": "string",
          "fullType": "string",
          "canBeNull": true,
          "readOnly": true,
          "description": "Path to use in API",
          "required": false
        },
        "url": {
          "type": "string",
          "fullType": "string",
          "canBeNull": true,
          "readOnly": true,
          "description": "Path with variables applied",
          "required": false
        },
        "vars": {
          "type": "complexType.SafeKeyValue<string>[]",
          "fullType": "complexType.SafeKeyValue<string>[]",
          "canBeNull": false,
          "readOnly": true,
          "description": "Variables to use in the path",
          "required": false
        }
      }
    },
    "services.expanded.Service": {
      "id": "Service",
      "namespace": "services.expanded",
      "description": "Description of a service",
      "properties": {
        "billing": {
          "type": "services.expanded.Billing",
          "fullType": "services.expanded.Billing",
          "canBeNull": false,
          "readOnly": true,
          "description": "Billing information",
          "required": false
        },
        "parentServiceId": {
          "type": "long",
          "fullType": "long",
          "canBeNull": true,
          "readOnly": true,
          "description": "Parent service ID",
          "required": false
        },
        "resource": {
          "type": "services.expanded.Resource",
          "fullType": "services.expanded.Resource",
          "canBeNull": false,
          "readOnly": true,
          "description": "Resource",
          "required": false
        },
        "route": {
          "type": "services.expanded.Route",
          "fullType": "services.expanded.Route",
          "canBeNull": true,
          "readOnly": true,
          "description": "Route",
          "required": false
        },
        "serviceId": {
          "type": "long",
          "fullType": "long",
          "canBeNull": false,
          "readOnly": true,
          "description": "Service ID",
          "required": false
        }
      }
    },
    "services.form.Answer": {
      "id": "Answer",
      "namespace": "services.form",
      "description": "Answer to a form",
      "properties": {
        "question": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": false,
          "description": "Question of the answer",
          "required": false
        },
        "value": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": false,
          "description": "Answer value to the question",
          "required": false
        }
      }
    },
    "services.form.AnswerAllowedValue": {
      "id": "AnswerAllowedValue",
      "namespace": "services.form",
      "description": "Possible value for an answer to the question",
      "properties": {
        "key": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Possible answer to the question",
          "required": false
        }
      }
    },
    "services.form.AnswerTypeEnum": {
      "id": "AnswerTypeEnum",
      "namespace": "services.form",
      "description": "Type of the answer",
      "enum": [
        "boolean",
        "date",
        "datetime",
        "double",
        "enum",
        "long",
        "string",
        "text"
      ],
      "enumType": "string"
    },
    "services.form.Description": {
      "id": "Description",
      "namespace": "services.form",
      "description": "Description of a form",
      "properties": {
        "name": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Name of the form",
          "required": false
        },
        "questions": {
          "type": "services.form.Question[]",
          "fullType": "services.form.Question[]",
          "canBeNull": false,
          "readOnly": true,
          "description": "List of available questions for the form",
          "required": false
        }
      }
    },
    "services.form.Form": {
      "id": "Form",
      "namespace": "services.form",
      "description": "Input body for posting a form",
      "properties": {
        "answers": {
          "type": "services.form.Answer[]",
          "fullType": "services.form.Answer[]",
          "canBeNull": false,
          "readOnly": false,
          "description": "Answers to the form",
          "required": true
        }
      }
    },
    "services.form.Question": {
      "id": "Question",
      "namespace": "services.form",
      "description": "Question description for a churn form",
      "properties": {
        "answers": {
          "type": "services.form.AnswerAllowedValue[]",
          "fullType": "services.form.AnswerAllowedValue[]",
          "canBeNull": true,
          "readOnly": true,
          "description": "List of available values for answer",
          "required": false
        },
        "mandatory": {
          "type": "boolean",
          "fullType": "boolean",
          "canBeNull": false,
          "readOnly": true,
          "description": "Is the Question mandatory for the form ?",
          "required": false
        },
        "question": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Question name",
          "required": false
        },
        "type": {
          "type": "services.form.AnswerTypeEnum",
          "fullType": "services.form.AnswerTypeEnum",
          "canBeNull": false,
          "readOnly": true,
          "description": "Type of the expected answer : text, enum, number...",
          "required": false
        }
      }
    },
    "services.form.Response": {
      "id": "Response",
      "namespace": "services.form",
      "description": "Response ack for posting a form",
      "properties": {
        "message": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": true,
          "description": "Message after posting a form",
          "required": false
        }
      }
    },
    "services.operation.ExecutionRequest": {
      "id": "ExecutionRequest",
      "namespace": "services.operation",
      "description": "Missing description",
      "properties": {
        "autoPayWithPreferredPaymentMethod": {
          "type": "boolean",
          "fullType": "boolean",
          "canBeNull": false,
          "readOnly": false,
          "description": "Indicates that order, if needed, will be automatically paid with preferred payment method",
          "required": false
        },
        "duration": {
          "type": "duration",
          "fullType": "duration",
          "canBeNull": false,
          "readOnly": false,
          "description": "Duration selected for the operation execution",
          "required": true
        },
        "pricingMode": {
          "type": "string",
          "fullType": "string",
          "canBeNull": false,
          "readOnly": false,
          "description": "Pricing mode selected for the operation execution",
          "required": true
        },
        "quantity": {
          "type": "long",
          "fullType": "long",
          "canBeNull": false,
          "readOnly": false,
          "description": "Quantity for the operation execution",
          "required": true
        }
      }
    },
    "services.operation.Order": {
      "id": "Order",
      "namespace": "services.operation",
      "description": "Order created by an Operation to modify a Service",
      "properties": {
        "order": {
          "type": "order.Order",
          "fullType": "order.Order",
          "canBeNull": true,
          "readOnly": true,
          "description": "Order created, if any",
          "required": false
        }
      }
    }
  }
}